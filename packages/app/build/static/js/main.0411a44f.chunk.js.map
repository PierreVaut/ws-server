{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","messages","setMessages","socket","useRef","open","setOpen","message","setMessage","useEffect","current","WebSocket","window","location","hostname","onmessage","prev","data","onopen","console","log","close","className","onClick","greet","send","disabled","type","value","onChange","event","target","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAoEeA,MA9Df,WAAgB,IAAD,EAEmBC,mBAAwB,IAF3C,mBAENC,EAFM,KAEIC,EAFJ,KAIPC,EAASC,iBAAyB,MAJ3B,EAMWJ,oBAAS,GANpB,mBAMNK,EANM,KAMAC,EANA,OAOiBN,mBAAS,IAP1B,mBAONO,EAPM,KAOGC,EAPH,KA2Cb,OAlBAC,qBAAU,WAYR,OAXAN,EAAOO,QAAU,IAAIC,UAAJ,eAAsBC,OAAOC,SAASC,SAAtC,UACjBX,EAAOO,QAAQK,UAAY,SAACR,GACxBL,GAAY,SAAAc,GAAI,4BAAQA,GAAR,CAAcT,EAAQU,WAE1Cd,EAAOO,QAAQQ,OAAU,WACpBf,EAAOO,UACRJ,GAAQ,GACRa,QAAQC,IAAI,YAIT,WAAUjB,EAAOO,SAAWP,EAAOO,QAAQW,WACnD,IAEDF,QAAQC,IAAIf,GAIV,qBAAKiB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQC,QArCI,WAChB,GAAGpB,EAAOO,QAAS,CACjB,IAAMc,EAAQ,0BACdrB,EAAOO,QAAQe,KAAKD,GACpBtB,GAAY,SAAAc,GAAI,4BAAQA,GAAR,CAAcQ,SAiCAE,UAAWrB,EAAvC,gCADF,gBAMI,uBAAOsB,KAAK,OAAOC,MAAOrB,EAASsB,SAAU,SAAAC,GAAK,OAAItB,EAAWsB,EAAMC,OAAOH,UAC9E,wBAAQL,QAnCI,WACfpB,EAAOO,UACRP,EAAOO,QAAQe,KAAKlB,GACpBL,GAAY,SAAAc,GAAI,4BAAQA,GAAR,CAAcT,OAC9BC,EAAW,MA+BuBkB,UAAWrB,EAAzC,oBAIDJ,EAAS+B,KAAI,SAACzB,GAAD,OAAY,4BAAIA,aChDvB0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0411a44f.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\n\n\n\n\nfunction App() {\n\n  const [messages, setMessages] = useState<Array<string>>([])\n\n  const socket = useRef<WebSocket | null>(null)\n\n  const [open, setOpen] = useState(false)\n  const [message, setMessage] = useState(\"\")\n\n  const sendGreet = () => {\n    if(socket.current) {\n      const greet = \"Greetings from client !\"\n      socket.current.send(greet)\n      setMessages(prev => [...prev, greet]);\n    }\n  }\n\n  const sendMessage = () => {\n    if(socket.current) {\n      socket.current.send(message)\n      setMessages(prev => [...prev, message]);\n      setMessage(\"\")\n    }\n  }\n\n  useEffect(() => {\n    socket.current = new WebSocket(`ws://${window.location.hostname}:8080`);\n    socket.current.onmessage = (message) => {\n        setMessages(prev => [...prev, message.data]);\n    };\n    socket.current.onopen = (() => {\n      if(socket.current) {\n        setOpen(true)\n        console.log(\"Open !\")\n      }\n    })\n\n    return () => {if(socket.current) { socket.current.close() }};\n}, []);\n\n  console.log(open)\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={sendGreet} disabled={!open}>\n          Greet the server !\n        </button>\n\n          Your message:\n          <input type=\"text\" value={message} onChange={event => setMessage(event.target.value)} />\n          <button onClick={sendMessage} disabled={!open}>Send !</button>\n\n\n\n        {messages.map((message)=> <p>{message}</p>)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}