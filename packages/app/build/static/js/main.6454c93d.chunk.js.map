{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","messages","setMessages","socket","useRef","open","setOpen","useEffect","console","log","current","WebSocket","onmessage","message","prev","data","onopen","close","className","onClick","greet","send","disabled","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAsDeA,MAhDf,WAAgB,IAAD,EAEmBC,mBAAwB,IAF3C,mBAENC,EAFM,KAEIC,EAFJ,KAIPC,EAASC,iBAAyB,MAJ3B,EAMWJ,oBAAS,GANpB,mBAMNK,EANM,KAMAC,EANA,KAoCb,OApBAC,qBAAU,WAcR,OAbAC,QAAQC,IAAI,eAEZN,EAAOO,QAAU,IAAIC,UAAU,uBAC/BR,EAAOO,QAAQE,UAAY,SAACC,GACxBX,GAAY,SAAAY,GAAI,4BAAQA,GAAR,CAAcD,EAAQE,WAE1CZ,EAAOO,QAAQM,OAAU,WACpBb,EAAOO,UACRJ,GAAQ,GACRE,QAAQC,IAAI,YAIT,WAAUN,EAAOO,SAAWP,EAAOO,QAAQO,WACnD,IAEDT,QAAQC,IAAIJ,GAIV,qBAAKa,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBAAQC,QA/BI,WAChB,GAAGhB,EAAOO,QAAS,CACjB,IAAMU,EAAQ,0BACdjB,EAAOO,QAAQW,KAAKD,GACpBlB,GAAY,SAAAY,GAAI,4BAAQA,GAAR,CAAcM,SA2BAE,UAAWjB,EAAvC,gCAGCJ,EAASsB,KAAI,SAACV,GAAD,OAAY,4BAAIA,aClCvBW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6454c93d.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport './App.css';\n\n\n\n\nfunction App() {\n\n  const [messages, setMessages] = useState<Array<string>>([])\n\n  const socket = useRef<WebSocket | null>(null)\n\n  const [open, setOpen] = useState(false)\n\n  const sendGreet = () => {\n    if(socket.current) {\n      const greet = \"Greetings from client !\"\n      socket.current.send(greet)\n      setMessages(prev => [...prev, greet]);\n    }\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect !\")\n\n    socket.current = new WebSocket('ws://localhost:8080');\n    socket.current.onmessage = (message) => {\n        setMessages(prev => [...prev, message.data]);\n    };\n    socket.current.onopen = (() => {\n      if(socket.current) {\n        setOpen(true)\n        console.log(\"Open !\")\n      }\n    })\n\n    return () => {if(socket.current) { socket.current.close() }};\n}, []);\n\n  console.log(open)\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={sendGreet} disabled={!open}>\n          Greet the server !\n        </button>\n        {messages.map((message)=> <p>{message}</p>)}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}